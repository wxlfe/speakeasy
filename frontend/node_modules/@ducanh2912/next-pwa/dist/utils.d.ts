import type { TsConfigJson as TSConfigJSON } from "type-fest";
import type { GenerateSW, InjectManifest } from "workbox-webpack-plugin";
import type { WorkboxTypes } from "./private_types.js";
export declare const overrideAfterCalledMethod: (workboxPlugin: InjectManifest | GenerateSW) => void;
export declare const isInjectManifestConfig: (config: WorkboxTypes[keyof WorkboxTypes] | undefined) => config is Omit<{
    skipWaiting?: undefined;
    clientsClaim?: undefined;
    cleanupOutdatedCaches?: undefined;
    ignoreURLParametersMatching?: undefined;
    manifestEntries?: undefined;
    babelPresetEnvTargets?: undefined;
    cacheId?: undefined;
    directoryIndex?: undefined;
    disableDevLogs?: undefined;
    importScripts?: undefined;
    inlineWorkboxRuntime?: undefined;
    navigateFallback?: undefined;
    navigateFallbackAllowlist?: undefined;
    navigateFallbackDenylist?: undefined;
    navigationPreload?: undefined;
    offlineGoogleAnalytics?: undefined;
    runtimeCaching?: undefined;
    sourcemap?: undefined;
    importScriptsViaChunks?: undefined;
} & import("workbox-build").BasePartial & import("workbox-build").WebpackPartial & import("workbox-build").InjectPartial & import("workbox-build").WebpackInjectManifestPartial, "exclude">;
export declare const isGenerateSWConfig: (config: WorkboxTypes[keyof WorkboxTypes] | undefined) => config is Omit<{
    injectionPoint?: undefined;
    swSrc?: undefined;
    compileSrc?: undefined;
    webpackCompilationPlugins?: undefined;
} & import("workbox-webpack-plugin").GenerateSWConfig & {
    skipWaiting?: boolean | undefined;
    clientsClaim?: boolean | undefined;
    cleanUpOutdatedCaches?: boolean | undefined;
    ignoreURLParametersMatching?: RegExp[] | undefined;
}, "exclude">;
export declare const addPathAliasesToSWC: (config: any, baseDir: string, paths: Record<string, string[]>) => void;
export declare const loadTSConfig: (baseDir: string, relativeTSConfigPath: string | undefined) => TSConfigJSON | undefined;
export declare const findFirstTruthy: <T, U>(arr: T[], fn: (elm: T) => U) => NonNullable<U> | undefined;
